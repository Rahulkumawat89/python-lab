def greet(name):
    print("Hello, " + name + ". Good morning!")
greet('rahul')
Hello, rahul. Good morning!
def absolute_value(num):
    if num >= 0:
        return num
    else:
        return -num
print(absolute_value(2))
print(absolute_value(-4))
2
4
def my_func():
	x = 10
	print("Value inside function:",x)
x = 20
my_func()
print("Value outside function:",x)
Value inside function: 10
Value outside function: 20
def greet(name, msg):
    print("Hello", name + ', ' + msg)
greet("rahul", "Good Morning")
Hello rahul, Good Morning
def greet(name, msg="Good morning!"): #Default Argument
    print("Hello", name + ', ' + msg)
greet("rahul")
greet("Tanishq", "How do you do?")
Hello rahul, Good morning!
Hello Tanishq, How do you do?
def greet(name, msg): 
    print("Hello", name + ', ' + msg)
greet(name = "Bruce",msg = "How do you do?")
greet(msg = "How do you do?",name = "Bruce") 
greet("Bruce", msg = "How do you do?")
Hello Bruce, How do you do?
Hello Bruce, How do you do?
Hello Bruce, How do you do?
def greet(*names):
    for name in names:
        print("Hello", name)
greet("Monica", "Luke", "Steve", "John")
Hello Monica
Hello Luke
Hello Steve
Hello John
def factorial(x): #Recursion
    if x == 1:
        return 1
    else:
        return (x * factorial(x-1))
num = 3
print("The factorial of", num, "is", factorial(num))
The factorial of 3 is 6
def tower_of_hanoi(disks, source, auxiliary, target):  
    if(disks == 1):  
        print('Move disk 1 from rod {} to rod {}.'.format(source, target))  
        return  
    tower_of_hanoi(disks - 1, source, target, auxiliary)  
    print('Move disk {} from rod {} to rod {}.'.format(disks, source, target))  
    tower_of_hanoi(disks - 1, auxiliary, source, target)  
disks = int(input('Enter the number of disks: '))  
tower_of_hanoi(disks, 'A', 'B', 'C')
Enter the number of disks: 5
Move disk 1 from rod A to rod C.
Move disk 2 from rod A to rod B.
Move disk 1 from rod C to rod B.
Move disk 3 from rod A to rod C.
Move disk 1 from rod B to rod A.
Move disk 2 from rod B to rod C.
Move disk 1 from rod A to rod C.
Move disk 4 from rod A to rod B.
Move disk 1 from rod C to rod B.
Move disk 2 from rod C to rod A.
Move disk 1 from rod B to rod A.
Move disk 3 from rod C to rod B.
Move disk 1 from rod A to rod C.
Move disk 2 from rod A to rod B.
Move disk 1 from rod C to rod B.
Move disk 5 from rod A to rod C.
Move disk 1 from rod B to rod A.
Move disk 2 from rod B to rod C.
Move disk 1 from rod A to rod C.
Move disk 3 from rod B to rod A.
Move disk 1 from rod C to rod B.
Move disk 2 from rod C to rod A.
Move disk 1 from rod B to rod A.
Move disk 4 from rod B to rod C.
Move disk 1 from rod A to rod C.
Move disk 2 from rod A to rod B.
Move disk 1 from rod C to rod B.
Move disk 3 from rod A to rod C.
Move disk 1 from rod B to rod A.
Move disk 2 from rod B to rod C.
Move disk 1 from rod A to rod C.
x = "global"
def foo():
    print("x inside:", x)
foo()
print("x outside:", x)
x inside: global
x outside: global
x = "global"
def foo():
    x = x * 2 
    print(x)
foo()#The output shows an error because Python treats x as a local variable and x is also not defined inside foo().
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)
<ipython-input-11-5bb9d7e58dc3> in <module>()
      5     print(x)
      6 
----> 7 foo()

<ipython-input-11-5bb9d7e58dc3> in foo()
      2 
      3 def foo():
----> 4     x = x * 2
      5     print(x)
      6 

UnboundLocalError: local variable 'x' referenced before assignment
#The output shows an error because we are trying to access a local variable y in a global scope whereas the local variable only works inside foo() or local scope.
def foo():
    y = "local"
foo()
print(y)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-13-0f38d98b38b3> in <module>()
      2     y = "local"
      3 foo()
----> 4 print(y)

NameError: name 'y' is not defined
def foo():
    y = "local"
    print(y)
foo()
local
x = "global "
def foo():
    global x
    y = "local"
    x = x * 2
    print(x)
    print(y)
foo()
global global 
local
x = 5
def foo():
    x = 10
    print("local x:", x)
foo()
print("global x:", x)
local x: 10
global x: 5
def outer():
    x = "local"
    def inner():
        nonlocal x
        x = "nonlocal"
        print("inner:", x)
    inner()
    print("outer:", x)
outer()
inner: nonlocal
outer: nonlocal
